// <auto-generated />
using System;
using Chilite.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chilite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230613214444_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Chilite.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = new Guid("17457b15-b268-4ff2-acf2-2e7743b60aa6"),
                            QuestionId = new Guid("9f52e4cc-1fdd-4e68-bd08-e619929d7b4f"),
                            Text = "Я начал свою карьеру в киноиндустрии с огромным интересом к миру кино и желанием внести свой вклад в создание качественных фильмов. Мои первые работы в этой отрасли были связаны с обучением и приобретением опыта, чтобы развиваться как профессионал.\r\n\r\nМоя первая работа в киноиндустрии была стажером на съемочной площадке фильма независимого производства, где я получил первоначальный опыт в организации съемочного процесса и взаимодействии с командой профессионалов. Затем, я работал на различных проектах в качестве ассистента режиссера и продюсера, где приобрел опыт в планировании и организации съемок, взаимодействии с актерами и экипажем, а также в постановке сцен.\r\n\r\nС течением времени и с накоплением опыта, я продвигался в своей карьере в киноиндустрии, работая на более крупных проектах и занимая более ответственные роли, такие как ассистент режиссера, продюсер, или другие специализированные должности. Мои первые работы в киноиндустрии были важным этапом моего профессионального развития, помогая мне приобрести ценный опыт и знания в этой индустрии, которые я успешно применяю и сегодня в своей карьере в киноиндустрии."
                        },
                        new
                        {
                            AnswerId = new Guid("80288c28-dc28-41cb-ad70-b48a8bf7e8ff"),
                            QuestionId = new Guid("b9edad52-a404-4d8b-96d1-190dd8aa054a"),
                            Text = "В течение моей карьеры в киноиндустрии, несколько фильмов и режиссеров оказали существенное влияние на мое творчество. Они вдохновляли меня своим стилем, техническим мастерством и подходом к кинематографу.\r\n\r\nОдин из таких режиссеров, который оказал глубокое влияние на меня, - Стэнли Кубрик. Его фильмы, такие как \"Сияние\", \"Заводной апельсин\", \"Барри Линдон\" и \"Сияние\", впечатлили меня своим неповторимым стилем снятия и уникальной визуальной эстетикой. Я был(а) восхищен(а) его аккуратностью в деталях и дерзкими решениями в кинематографической режиссуре, которые сделали его фильмы настоящими произведениями искусства.\r\n\r\nЕще одним режиссером, который оказал влияние на мое творчество, - Кристофер Нолан. Его фильмы, такие как \"Начало\", \"Темный рыцарь\" и \"Интерстеллар\", являются примерами сложной структуры сюжета и инновационных режиссерских приемов. Я восхищался(ась) его способностью создавать глубокие и захватывающие истории, сочетая фантастику с философскими и эмоциональными аспектами.\r\n\r\nТакже стоит отметить фильмы \"Бесславные ублюдки\" Квентина Тарантино и \"Драйв\" Николаса Виндинга Рефна, которые оказали влияние на меня своим ярким стилем, отличной режиссурой и уникальным подходом к кинематографу.\r\n\r\nЭти режиссеры и их фильмы вдохновляют меня в моем творческом процессе и влияют на мой подход к созданию фильмов"
                        },
                        new
                        {
                            AnswerId = new Guid("f0cbeea4-cd5d-44cc-bb52-7f2362c86e99"),
                            QuestionId = new Guid("598f908c-c02d-4e1b-904f-1da660c3bccd"),
                            Text = "Когда я выбираю проекты, над которыми хочу работать, я придерживаюсь нескольких принципов. Прежде всего, я уделяю внимание сценарию. Для меня важно, чтобы история была интересной, оригинальной и вызывала эмоциональный отклик. Я также обращаю внимание на режиссера и его/ее предыдущий опыт, стиль и подход к кинематографу.\r\n\r\nДалее, я анализирую бюджет и ресурсы проекта. Это включает оценку финансовых аспектов, продолжительности съемок, условий работы и других практических факторов. Я стараюсь выбирать проекты, которые предлагают адекватное финансовое вознаграждение и условия работы, соответствующие моим профессиональным навыкам и ожиданиям.\r\n\r\nТакже я учитываю команду проекта. Важно работать с профессионалами, которые разделяют мои ценности и подходы к работе. Команда должна быть сплоченной и иметь опыт в реализации аналогичных проектов.\r\n\r\nЯ также обращаю внимание на потенциал проекта. Если проект предлагает новые вызовы, возможность для профессионального роста, расширения моих навыков или участия в уникальных и значимых проектах, это может стать решающим фактором в выборе проекта.\r\n\r\nНаконец, я также учитываю свою личную мотивацию и интерес к проекту. Если история или концепция проекта вызывают у меня эмоциональное влечение или внутреннюю мотивацию, это может стать дополнительным стимулом для выбора проекта.\r\n\r\nКороче говоря, при выборе проектов, над которыми хочу работать, я учитываю сценарий, режиссера, бюджет и ресурсы проекта, команду, потенциал проекта и свою личную мотивацию. Эти факторы взвешиваются вместе, чтобы определить, какие проекты соответствуют моим профессиональным и личным целям."
                        });
                });

            modelBuilder.Entity("Chilite.Domain.Entities.Interview", b =>
                {
                    b.Property<Guid>("InterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InterviewId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Interviews");

                    b.HasData(
                        new
                        {
                            InterviewId = new Guid("607ed998-da08-11ed-afa1-0242ac120002"),
                            EndDate = new DateTime(2023, 6, 14, 2, 44, 43, 954, DateTimeKind.Local).AddTicks(3696),
                            RoomId = "706F3EBC-5B7E-43FB-AAD1-18305C90DF00",
                            StartDate = new DateTime(2023, 6, 14, 1, 44, 43, 954, DateTimeKind.Local).AddTicks(3682),
                            Title = "За кадром: жизнь и карьера режиссера",
                            UserId = "CEE0ABB0-E53A-44E2-8287-87A3DCE8E7E2"
                        });
                });

            modelBuilder.Entity("Chilite.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("InterviewId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = new Guid("9f52e4cc-1fdd-4e68-bd08-e619929d7b4f"),
                            InterviewId = new Guid("607ed998-da08-11ed-afa1-0242ac120002"),
                            Text = "Как вы начали свою карьеру в киноиндустрии и какие были ваши первые работы?"
                        },
                        new
                        {
                            QuestionId = new Guid("b9edad52-a404-4d8b-96d1-190dd8aa054a"),
                            InterviewId = new Guid("607ed998-da08-11ed-afa1-0242ac120002"),
                            Text = "Какие фильмы или режиссеры оказали влияние на ваше творчество?"
                        },
                        new
                        {
                            QuestionId = new Guid("598f908c-c02d-4e1b-904f-1da660c3bccd"),
                            InterviewId = new Guid("607ed998-da08-11ed-afa1-0242ac120002"),
                            Text = "Как вы выбираете проекты, над которыми хотите работать?"
                        });
                });

            modelBuilder.Entity("Chilite.Domain.Entities.Room", b =>
                {
                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoomId");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            RoomId = "706F3EBC-5B7E-43FB-AAD1-18305C90DF00"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "332A0729-7DA8-4BFA-BC76-E26889B0A8C6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "CEE0ABB0-E53A-44E2-8287-87A3DCE8E7E2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7cc5adc1-e8c1-4320-94e1-7bae49e66978",
                            Email = "InterView@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "INTERVIEW@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPtQjST6jMbujM+rvmB5W4wpTY+E7EeqBz+L/hmCmiN9gVinJ0GBPfyQiBEt1QAx8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "CEE0ABB0-E53A-44E2-8287-87A3DCE8E7E2",
                            RoleId = "332A0729-7DA8-4BFA-BC76-E26889B0A8C6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Chilite.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Chilite.Domain.Entities.Answer", b =>
                {
                    b.HasOne("Chilite.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Chilite.Domain.Entities.Interview", b =>
                {
                    b.HasOne("Chilite.Domain.Entities.Room", "Room")
                        .WithMany("Interviews")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chilite.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Interviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Chilite.Domain.Entities.Question", b =>
                {
                    b.HasOne("Chilite.Domain.Entities.Interview", "Interview")
                        .WithMany("Questions")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chilite.Domain.Entities.Interview", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Chilite.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Chilite.Domain.Entities.Room", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("Chilite.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Interviews");
                });
#pragma warning restore 612, 618
        }
    }
}
